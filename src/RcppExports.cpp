// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DecoSpectra
List DecoSpectra(int idx_pg, List spectra_eics, NumericVector peak_ms1, int num_scantime, int idx_apex_eic, NumericVector info_pk_ms1, double peakwidth_min, double snthr, bool is_dec_smoothed);
RcppExport SEXP _OptiLCMS_DecoSpectra(SEXP idx_pgSEXP, SEXP spectra_eicsSEXP, SEXP peak_ms1SEXP, SEXP num_scantimeSEXP, SEXP idx_apex_eicSEXP, SEXP info_pk_ms1SEXP, SEXP peakwidth_minSEXP, SEXP snthrSEXP, SEXP is_dec_smoothedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx_pg(idx_pgSEXP);
    Rcpp::traits::input_parameter< List >::type spectra_eics(spectra_eicsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type peak_ms1(peak_ms1SEXP);
    Rcpp::traits::input_parameter< int >::type num_scantime(num_scantimeSEXP);
    Rcpp::traits::input_parameter< int >::type idx_apex_eic(idx_apex_eicSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type info_pk_ms1(info_pk_ms1SEXP);
    Rcpp::traits::input_parameter< double >::type peakwidth_min(peakwidth_minSEXP);
    Rcpp::traits::input_parameter< double >::type snthr(snthrSEXP);
    Rcpp::traits::input_parameter< bool >::type is_dec_smoothed(is_dec_smoothedSEXP);
    rcpp_result_gen = Rcpp::wrap(DecoSpectra(idx_pg, spectra_eics, peak_ms1, num_scantime, idx_apex_eic, info_pk_ms1, peakwidth_min, snthr, is_dec_smoothed));
    return rcpp_result_gen;
END_RCPP
}
// PerformDIA_main
List PerformDIA_main(List pm, NumericMatrix swath, NumericVector scanrt1, NumericVector scanrt2, List scanms1, List scanms2, double pkw_min, double ppm2, double sn, double sm_span, double filt);
RcppExport SEXP _OptiLCMS_PerformDIA_main(SEXP pmSEXP, SEXP swathSEXP, SEXP scanrt1SEXP, SEXP scanrt2SEXP, SEXP scanms1SEXP, SEXP scanms2SEXP, SEXP pkw_minSEXP, SEXP ppm2SEXP, SEXP snSEXP, SEXP sm_spanSEXP, SEXP filtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type swath(swathSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scanrt1(scanrt1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scanrt2(scanrt2SEXP);
    Rcpp::traits::input_parameter< List >::type scanms1(scanms1SEXP);
    Rcpp::traits::input_parameter< List >::type scanms2(scanms2SEXP);
    Rcpp::traits::input_parameter< double >::type pkw_min(pkw_minSEXP);
    Rcpp::traits::input_parameter< double >::type ppm2(ppm2SEXP);
    Rcpp::traits::input_parameter< double >::type sn(snSEXP);
    Rcpp::traits::input_parameter< double >::type sm_span(sm_spanSEXP);
    Rcpp::traits::input_parameter< double >::type filt(filtSEXP);
    rcpp_result_gen = Rcpp::wrap(PerformDIA_main(pm, swath, scanrt1, scanrt2, scanms1, scanms2, pkw_min, ppm2, sn, sm_span, filt));
    return rcpp_result_gen;
END_RCPP
}
// dia_feature_preparation
List dia_feature_preparation(NumericMatrix groupPkMtx, NumericMatrix chromPeaks, List peakidx);
RcppExport SEXP _OptiLCMS_dia_feature_preparation(SEXP groupPkMtxSEXP, SEXP chromPeaksSEXP, SEXP peakidxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type groupPkMtx(groupPkMtxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type chromPeaks(chromPeaksSEXP);
    Rcpp::traits::input_parameter< List >::type peakidx(peakidxSEXP);
    rcpp_result_gen = Rcpp::wrap(dia_feature_preparation(groupPkMtx, chromPeaks, peakidx));
    return rcpp_result_gen;
END_RCPP
}
// SpectraDeconvCore
List SpectraDeconvCore(int idx, List spectra_eics, NumericMatrix ms1Peak, int ScanNum, NumericVector ms1PeakInfo, int idx_apex_ms1, double min_peakwidth, double max_peakwidth, double snthr);
RcppExport SEXP _OptiLCMS_SpectraDeconvCore(SEXP idxSEXP, SEXP spectra_eicsSEXP, SEXP ms1PeakSEXP, SEXP ScanNumSEXP, SEXP ms1PeakInfoSEXP, SEXP idx_apex_ms1SEXP, SEXP min_peakwidthSEXP, SEXP max_peakwidthSEXP, SEXP snthrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< List >::type spectra_eics(spectra_eicsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type ms1Peak(ms1PeakSEXP);
    Rcpp::traits::input_parameter< int >::type ScanNum(ScanNumSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ms1PeakInfo(ms1PeakInfoSEXP);
    Rcpp::traits::input_parameter< int >::type idx_apex_ms1(idx_apex_ms1SEXP);
    Rcpp::traits::input_parameter< double >::type min_peakwidth(min_peakwidthSEXP);
    Rcpp::traits::input_parameter< double >::type max_peakwidth(max_peakwidthSEXP);
    Rcpp::traits::input_parameter< double >::type snthr(snthrSEXP);
    rcpp_result_gen = Rcpp::wrap(SpectraDeconvCore(idx, spectra_eics, ms1Peak, ScanNum, ms1PeakInfo, idx_apex_ms1, min_peakwidth, max_peakwidth, snthr));
    return rcpp_result_gen;
END_RCPP
}
// r_calculate_unweighted_entropy_similarity
double r_calculate_unweighted_entropy_similarity(const Rcpp::NumericMatrix peaks_a, const Rcpp::NumericMatrix peaks_b, float ms2_tolerance_in_da, float ms2_tolerance_in_ppm, bool clean_spectra, float min_mz, float max_mz, float noise_threshold, int max_peak_num);
RcppExport SEXP _OptiLCMS_r_calculate_unweighted_entropy_similarity(SEXP peaks_aSEXP, SEXP peaks_bSEXP, SEXP ms2_tolerance_in_daSEXP, SEXP ms2_tolerance_in_ppmSEXP, SEXP clean_spectraSEXP, SEXP min_mzSEXP, SEXP max_mzSEXP, SEXP noise_thresholdSEXP, SEXP max_peak_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks_a(peaks_aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks_b(peaks_bSEXP);
    Rcpp::traits::input_parameter< float >::type ms2_tolerance_in_da(ms2_tolerance_in_daSEXP);
    Rcpp::traits::input_parameter< float >::type ms2_tolerance_in_ppm(ms2_tolerance_in_ppmSEXP);
    Rcpp::traits::input_parameter< bool >::type clean_spectra(clean_spectraSEXP);
    Rcpp::traits::input_parameter< float >::type min_mz(min_mzSEXP);
    Rcpp::traits::input_parameter< float >::type max_mz(max_mzSEXP);
    Rcpp::traits::input_parameter< float >::type noise_threshold(noise_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_peak_num(max_peak_numSEXP);
    rcpp_result_gen = Rcpp::wrap(r_calculate_unweighted_entropy_similarity(peaks_a, peaks_b, ms2_tolerance_in_da, ms2_tolerance_in_ppm, clean_spectra, min_mz, max_mz, noise_threshold, max_peak_num));
    return rcpp_result_gen;
END_RCPP
}
// r_calculate_entropy_similarity
double r_calculate_entropy_similarity(const Rcpp::NumericMatrix peaks_a, const Rcpp::NumericMatrix peaks_b, float ms2_tolerance_in_da, float ms2_tolerance_in_ppm, bool clean_spectra, float min_mz, float max_mz, float noise_threshold, int max_peak_num);
RcppExport SEXP _OptiLCMS_r_calculate_entropy_similarity(SEXP peaks_aSEXP, SEXP peaks_bSEXP, SEXP ms2_tolerance_in_daSEXP, SEXP ms2_tolerance_in_ppmSEXP, SEXP clean_spectraSEXP, SEXP min_mzSEXP, SEXP max_mzSEXP, SEXP noise_thresholdSEXP, SEXP max_peak_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks_a(peaks_aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type peaks_b(peaks_bSEXP);
    Rcpp::traits::input_parameter< float >::type ms2_tolerance_in_da(ms2_tolerance_in_daSEXP);
    Rcpp::traits::input_parameter< float >::type ms2_tolerance_in_ppm(ms2_tolerance_in_ppmSEXP);
    Rcpp::traits::input_parameter< bool >::type clean_spectra(clean_spectraSEXP);
    Rcpp::traits::input_parameter< float >::type min_mz(min_mzSEXP);
    Rcpp::traits::input_parameter< float >::type max_mz(max_mzSEXP);
    Rcpp::traits::input_parameter< float >::type noise_threshold(noise_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type max_peak_num(max_peak_numSEXP);
    rcpp_result_gen = Rcpp::wrap(r_calculate_entropy_similarity(peaks_a, peaks_b, ms2_tolerance_in_da, ms2_tolerance_in_ppm, clean_spectra, min_mz, max_mz, noise_threshold, max_peak_num));
    return rcpp_result_gen;
END_RCPP
}
// PerformDDADeco
List PerformDDADeco(NumericMatrix pm, NumericVector scant1, NumericVector scant2, List scanms1, List scanms2, NumericMatrix prec_mzs, double win_size, double ppm1, double ppm2, double sn, double filt, double intensity_thresh, int ionmode, std::string db_path, bool decoOn, bool useEntropy, bool show_output, int thread_num, std::string file_nm);
RcppExport SEXP _OptiLCMS_PerformDDADeco(SEXP pmSEXP, SEXP scant1SEXP, SEXP scant2SEXP, SEXP scanms1SEXP, SEXP scanms2SEXP, SEXP prec_mzsSEXP, SEXP win_sizeSEXP, SEXP ppm1SEXP, SEXP ppm2SEXP, SEXP snSEXP, SEXP filtSEXP, SEXP intensity_threshSEXP, SEXP ionmodeSEXP, SEXP db_pathSEXP, SEXP decoOnSEXP, SEXP useEntropySEXP, SEXP show_outputSEXP, SEXP thread_numSEXP, SEXP file_nmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scant1(scant1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scant2(scant2SEXP);
    Rcpp::traits::input_parameter< List >::type scanms1(scanms1SEXP);
    Rcpp::traits::input_parameter< List >::type scanms2(scanms2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type prec_mzs(prec_mzsSEXP);
    Rcpp::traits::input_parameter< double >::type win_size(win_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type ppm1(ppm1SEXP);
    Rcpp::traits::input_parameter< double >::type ppm2(ppm2SEXP);
    Rcpp::traits::input_parameter< double >::type sn(snSEXP);
    Rcpp::traits::input_parameter< double >::type filt(filtSEXP);
    Rcpp::traits::input_parameter< double >::type intensity_thresh(intensity_threshSEXP);
    Rcpp::traits::input_parameter< int >::type ionmode(ionmodeSEXP);
    Rcpp::traits::input_parameter< std::string >::type db_path(db_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type decoOn(decoOnSEXP);
    Rcpp::traits::input_parameter< bool >::type useEntropy(useEntropySEXP);
    Rcpp::traits::input_parameter< bool >::type show_output(show_outputSEXP);
    Rcpp::traits::input_parameter< int >::type thread_num(thread_numSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_nm(file_nmSEXP);
    rcpp_result_gen = Rcpp::wrap(PerformDDADeco(pm, scant1, scant2, scanms1, scanms2, prec_mzs, win_size, ppm1, ppm2, sn, filt, intensity_thresh, ionmode, db_path, decoOn, useEntropy, show_output, thread_num, file_nm));
    return rcpp_result_gen;
END_RCPP
}
// PerformDIADeco
List PerformDIADeco(List pm, NumericMatrix swath, NumericVector scant1, NumericVector scant2, List scanms1, List scanms2, double pkw_min, double ppm2, double sn, double span, double filt);
RcppExport SEXP _OptiLCMS_PerformDIADeco(SEXP pmSEXP, SEXP swathSEXP, SEXP scant1SEXP, SEXP scant2SEXP, SEXP scanms1SEXP, SEXP scanms2SEXP, SEXP pkw_minSEXP, SEXP ppm2SEXP, SEXP snSEXP, SEXP spanSEXP, SEXP filtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type swath(swathSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scant1(scant1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scant2(scant2SEXP);
    Rcpp::traits::input_parameter< List >::type scanms1(scanms1SEXP);
    Rcpp::traits::input_parameter< List >::type scanms2(scanms2SEXP);
    Rcpp::traits::input_parameter< double >::type pkw_min(pkw_minSEXP);
    Rcpp::traits::input_parameter< double >::type ppm2(ppm2SEXP);
    Rcpp::traits::input_parameter< double >::type sn(snSEXP);
    Rcpp::traits::input_parameter< double >::type span(spanSEXP);
    Rcpp::traits::input_parameter< double >::type filt(filtSEXP);
    rcpp_result_gen = Rcpp::wrap(PerformDIADeco(pm, swath, scant1, scant2, scanms1, scanms2, pkw_min, ppm2, sn, span, filt));
    return rcpp_result_gen;
END_RCPP
}
// SpectraSearching
List SpectraSearching(List ConsensusRes, IntegerVector idxs, NumericMatrix peak_matrix, double ppm_ms1, double ppm_ms2, double rt_tol, List rt_ms1, List scan_ms1, int ion_mode, std::string database_path, bool use_rt, bool enableNL, bool useEntropy);
RcppExport SEXP _OptiLCMS_SpectraSearching(SEXP ConsensusResSEXP, SEXP idxsSEXP, SEXP peak_matrixSEXP, SEXP ppm_ms1SEXP, SEXP ppm_ms2SEXP, SEXP rt_tolSEXP, SEXP rt_ms1SEXP, SEXP scan_ms1SEXP, SEXP ion_modeSEXP, SEXP database_pathSEXP, SEXP use_rtSEXP, SEXP enableNLSEXP, SEXP useEntropySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type ConsensusRes(ConsensusResSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type idxs(idxsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type peak_matrix(peak_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type ppm_ms1(ppm_ms1SEXP);
    Rcpp::traits::input_parameter< double >::type ppm_ms2(ppm_ms2SEXP);
    Rcpp::traits::input_parameter< double >::type rt_tol(rt_tolSEXP);
    Rcpp::traits::input_parameter< List >::type rt_ms1(rt_ms1SEXP);
    Rcpp::traits::input_parameter< List >::type scan_ms1(scan_ms1SEXP);
    Rcpp::traits::input_parameter< int >::type ion_mode(ion_modeSEXP);
    Rcpp::traits::input_parameter< std::string >::type database_path(database_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type use_rt(use_rtSEXP);
    Rcpp::traits::input_parameter< bool >::type enableNL(enableNLSEXP);
    Rcpp::traits::input_parameter< bool >::type useEntropy(useEntropySEXP);
    rcpp_result_gen = Rcpp::wrap(SpectraSearching(ConsensusRes, idxs, peak_matrix, ppm_ms1, ppm_ms2, rt_tol, rt_ms1, scan_ms1, ion_mode, database_path, use_rt, enableNL, useEntropy));
    return rcpp_result_gen;
END_RCPP
}
// annotation_export
List annotation_export(List searching_res, int type, int topN, int ion_mode, std::string database_path, bool lipidsClass);
RcppExport SEXP _OptiLCMS_annotation_export(SEXP searching_resSEXP, SEXP typeSEXP, SEXP topNSEXP, SEXP ion_modeSEXP, SEXP database_pathSEXP, SEXP lipidsClassSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type searching_res(searching_resSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type topN(topNSEXP);
    Rcpp::traits::input_parameter< int >::type ion_mode(ion_modeSEXP);
    Rcpp::traits::input_parameter< std::string >::type database_path(database_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type lipidsClass(lipidsClassSEXP);
    rcpp_result_gen = Rcpp::wrap(annotation_export(searching_res, type, topN, ion_mode, database_path, lipidsClass));
    return rcpp_result_gen;
END_RCPP
}
// SpectrumConsensus
List SpectrumConsensus(List DecResList, NumericMatrix peak_mtx, double ppm_ms2, double concensus_frac, bool db_correction, std::string database_path, bool use_rt, int ion_mode, bool useEntropy);
RcppExport SEXP _OptiLCMS_SpectrumConsensus(SEXP DecResListSEXP, SEXP peak_mtxSEXP, SEXP ppm_ms2SEXP, SEXP concensus_fracSEXP, SEXP db_correctionSEXP, SEXP database_pathSEXP, SEXP use_rtSEXP, SEXP ion_modeSEXP, SEXP useEntropySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type DecResList(DecResListSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type peak_mtx(peak_mtxSEXP);
    Rcpp::traits::input_parameter< double >::type ppm_ms2(ppm_ms2SEXP);
    Rcpp::traits::input_parameter< double >::type concensus_frac(concensus_fracSEXP);
    Rcpp::traits::input_parameter< bool >::type db_correction(db_correctionSEXP);
    Rcpp::traits::input_parameter< std::string >::type database_path(database_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type use_rt(use_rtSEXP);
    Rcpp::traits::input_parameter< int >::type ion_mode(ion_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type useEntropy(useEntropySEXP);
    rcpp_result_gen = Rcpp::wrap(SpectrumConsensus(DecResList, peak_mtx, ppm_ms2, concensus_frac, db_correction, database_path, use_rt, ion_mode, useEntropy));
    return rcpp_result_gen;
END_RCPP
}
// DescendZero
IntegerVector DescendZero(NumericVector yvals, int numin, int istart);
RcppExport SEXP _OptiLCMS_DescendZero(SEXP yvalsSEXP, SEXP numinSEXP, SEXP istartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yvals(yvalsSEXP);
    Rcpp::traits::input_parameter< int >::type numin(numinSEXP);
    Rcpp::traits::input_parameter< int >::type istart(istartSEXP);
    rcpp_result_gen = Rcpp::wrap(DescendZero(yvals, numin, istart));
    return rcpp_result_gen;
END_RCPP
}
// ColMax
NumericVector ColMax(const NumericVector& inval, const int& n, const int& dn);
RcppExport SEXP _OptiLCMS_ColMax(SEXP invalSEXP, SEXP nSEXP, SEXP dnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type inval(invalSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type dn(dnSEXP);
    rcpp_result_gen = Rcpp::wrap(ColMax(inval, n, dn));
    return rcpp_result_gen;
END_RCPP
}
// DescendMin
IntegerVector DescendMin(NumericVector yvals, int numin, int istart);
RcppExport SEXP _OptiLCMS_DescendMin(SEXP yvalsSEXP, SEXP numinSEXP, SEXP istartSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yvals(yvalsSEXP);
    Rcpp::traits::input_parameter< int >::type numin(numinSEXP);
    Rcpp::traits::input_parameter< int >::type istart(istartSEXP);
    rcpp_result_gen = Rcpp::wrap(DescendMin(yvals, numin, istart));
    return rcpp_result_gen;
END_RCPP
}
// WhichColMax
IntegerVector WhichColMax(const NumericVector& inval, const int& n, const int& dn);
RcppExport SEXP _OptiLCMS_WhichColMax(SEXP invalSEXP, SEXP nSEXP, SEXP dnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type inval(invalSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type dn(dnSEXP);
    rcpp_result_gen = Rcpp::wrap(WhichColMax(inval, n, dn));
    return rcpp_result_gen;
END_RCPP
}
// FindEqualGreaterM
IntegerVector FindEqualGreaterM(const NumericVector& inval, const int& size, const NumericVector& values, const int& valsize);
RcppExport SEXP _OptiLCMS_FindEqualGreaterM(SEXP invalSEXP, SEXP sizeSEXP, SEXP valuesSEXP, SEXP valsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type inval(invalSEXP);
    Rcpp::traits::input_parameter< const int& >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const int& >::type valsize(valsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(FindEqualGreaterM(inval, size, values, valsize));
    return rcpp_result_gen;
END_RCPP
}
// RectUnique
IntegerVector RectUnique(const NumericVector& m, const IntegerVector& order, const int& nrow, const int& ncol, const double& xdiff, const double& ydiff);
RcppExport SEXP _OptiLCMS_RectUnique(SEXP mSEXP, SEXP orderSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP xdiffSEXP, SEXP ydiffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type order(orderSEXP);
    Rcpp::traits::input_parameter< const int& >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const double& >::type xdiff(xdiffSEXP);
    Rcpp::traits::input_parameter< const double& >::type ydiff(ydiffSEXP);
    rcpp_result_gen = Rcpp::wrap(RectUnique(m, order, nrow, ncol, xdiff, ydiff));
    return rcpp_result_gen;
END_RCPP
}
// continuousPtsAboveThreshold
int continuousPtsAboveThreshold(NumericVector x, int istart, int numin, double threshold, int num);
RcppExport SEXP _OptiLCMS_continuousPtsAboveThreshold(SEXP xSEXP, SEXP istartSEXP, SEXP numinSEXP, SEXP thresholdSEXP, SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type istart(istartSEXP);
    Rcpp::traits::input_parameter< int >::type numin(numinSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    rcpp_result_gen = Rcpp::wrap(continuousPtsAboveThreshold(x, istart, numin, threshold, num));
    return rcpp_result_gen;
END_RCPP
}
// continuousPtsAboveThresholdIdx
IntegerVector continuousPtsAboveThresholdIdx(NumericVector x, int istart, int numin, double threshold, int num);
RcppExport SEXP _OptiLCMS_continuousPtsAboveThresholdIdx(SEXP xSEXP, SEXP istartSEXP, SEXP numinSEXP, SEXP thresholdSEXP, SEXP numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type istart(istartSEXP);
    Rcpp::traits::input_parameter< int >::type numin(numinSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    rcpp_result_gen = Rcpp::wrap(continuousPtsAboveThresholdIdx(x, istart, numin, threshold, num));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP binYonX(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP binYonX_multi(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP breaks_on_nBins(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP fastMatch(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP findmzROI(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP getEIC(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP getMZ(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP impute_with_linear_interpolation(SEXP, SEXP);
RcppExport SEXP impute_with_linear_interpolation_base(SEXP, SEXP, SEXP);
RcppExport SEXP massifquant(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP R_set_obiwarp(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_OptiLCMS_DecoSpectra", (DL_FUNC) &_OptiLCMS_DecoSpectra, 9},
    {"_OptiLCMS_PerformDIA_main", (DL_FUNC) &_OptiLCMS_PerformDIA_main, 11},
    {"_OptiLCMS_dia_feature_preparation", (DL_FUNC) &_OptiLCMS_dia_feature_preparation, 3},
    {"_OptiLCMS_SpectraDeconvCore", (DL_FUNC) &_OptiLCMS_SpectraDeconvCore, 9},
    {"_OptiLCMS_r_calculate_unweighted_entropy_similarity", (DL_FUNC) &_OptiLCMS_r_calculate_unweighted_entropy_similarity, 9},
    {"_OptiLCMS_r_calculate_entropy_similarity", (DL_FUNC) &_OptiLCMS_r_calculate_entropy_similarity, 9},
    {"_OptiLCMS_PerformDDADeco", (DL_FUNC) &_OptiLCMS_PerformDDADeco, 19},
    {"_OptiLCMS_PerformDIADeco", (DL_FUNC) &_OptiLCMS_PerformDIADeco, 11},
    {"_OptiLCMS_SpectraSearching", (DL_FUNC) &_OptiLCMS_SpectraSearching, 13},
    {"_OptiLCMS_annotation_export", (DL_FUNC) &_OptiLCMS_annotation_export, 6},
    {"_OptiLCMS_SpectrumConsensus", (DL_FUNC) &_OptiLCMS_SpectrumConsensus, 9},
    {"_OptiLCMS_DescendZero", (DL_FUNC) &_OptiLCMS_DescendZero, 3},
    {"_OptiLCMS_ColMax", (DL_FUNC) &_OptiLCMS_ColMax, 3},
    {"_OptiLCMS_DescendMin", (DL_FUNC) &_OptiLCMS_DescendMin, 3},
    {"_OptiLCMS_WhichColMax", (DL_FUNC) &_OptiLCMS_WhichColMax, 3},
    {"_OptiLCMS_FindEqualGreaterM", (DL_FUNC) &_OptiLCMS_FindEqualGreaterM, 4},
    {"_OptiLCMS_RectUnique", (DL_FUNC) &_OptiLCMS_RectUnique, 6},
    {"_OptiLCMS_continuousPtsAboveThreshold", (DL_FUNC) &_OptiLCMS_continuousPtsAboveThreshold, 5},
    {"_OptiLCMS_continuousPtsAboveThresholdIdx", (DL_FUNC) &_OptiLCMS_continuousPtsAboveThresholdIdx, 5},
    {"binYonX",                               (DL_FUNC) &binYonX,                               14},
    {"binYonX_multi",                         (DL_FUNC) &binYonX_multi,                         14},
    {"breaks_on_nBins",                       (DL_FUNC) &breaks_on_nBins,                        4},
    {"fastMatch",                             (DL_FUNC) &fastMatch,                              6},
    {"findmzROI",                             (DL_FUNC) &findmzROI,                             10},
    {"getEIC",                                (DL_FUNC) &getEIC,                                 6},
    {"getMZ",                                 (DL_FUNC) &getMZ,                                  6},
    {"impute_with_linear_interpolation",      (DL_FUNC) &impute_with_linear_interpolation,       2},
    {"impute_with_linear_interpolation_base", (DL_FUNC) &impute_with_linear_interpolation_base,  3},
    {"massifquant",                           (DL_FUNC) &massifquant,                           14},
    {"R_set_obiwarp",                         (DL_FUNC) &R_set_obiwarp,                         18},
    {NULL, NULL, 0}
};

RcppExport void R_init_OptiLCMS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
